package returncustomerhk;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Test_women_ReturnCustomer_HK {
	static WebDriver driver;
	Actions action;
	int sleepTime;
	String price_shoes1; // 先定为String类型
	String price_shoes2; // 先定为String类型
	Map<Integer, String> map = new HashMap<Integer, String>();	//截图名称
	public Test_women_ReturnCustomer_HK() {
		System.setProperty("webdriver.firefox.bin",
				"D:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe");
		driver = new FirefoxDriver();
		driver.manage().window().maximize();
		action = new Actions(driver);
		price_shoes1 = null;
		price_shoes2 = null;
		sleepTime = 1000;	//休眠时间
		//截图名称
		map.put(1, "Unable_to_open_Decathlon.png");
		map.put(2, "Unable_to_local_the_SuoYouYunDongFenLei.png");
		map.put(3, "Unable_to_local_the_PaoBu.png");
		map.put(4, "Unable_to_local_the_NvShiPaoBuXie.png");
		map.put(5, "Unable_to_click_on_NvShiPaoBuXie.png");
		map.put(6, "Unable_to_local_the_YunDongFanWei.png");
		map.put(7, "Unable_to_local_the_XingBie.png");
		map.put(8, "Unable_to_input_price.png");
		map.put(9, "Unable_to_click_the_button_of_Queding.png");
		map.put(10, "Not_show_the_shoes_price.png");
		map.put(11, "Unable_to_choice_the_NvShiPaoBuXie.png");
		map.put(12, "Windows_can_not_skip.png");
		map.put(13, "The_shoes_price_error.png");
		map.put(14, "Unable_to_click_the_white_shoes.png");
		map.put(15, "Unable_to_click_the_shoes_size.png");
		map.put(16, "Unable_to_click_the_button_of_increase_quantity.png");
		map.put(17, "Unable_to_add_to_Cart.png");
		map.put(18, "Unable_to_add_to_Cart.png");
		map.put(19, "The_search_box_unable_to_input.png");
		map.put(20, "Unable_to_click_the_search_button.png");
		map.put(21, "Unable_to_choice_the_Tshirt.png");
		map.put(22, "The_window_skip_failure.png");
		map.put(23, "Unable_to_click_the_shirt_size.png");
		map.put(24, "Unable_to_add_to_cart.png");
		map.put(25, "The_goods_out_of_store.png");
		map.put(26, "he_mouse_unable_move_on_the_cartButton.png");
		map.put(27, "Unable_to_click_the_button_of_payment.png");
		map.put(28, "Unable_to_find_goods_price.png");
		map.put(29, "The_goods_total_price_error.png");
		map.put(30, "Ubable_to_add_the_shoes_quantity.png");
		map.put(31, "Unable_to_remove_the_Tshirt.png");
		map.put(32, "The_counpon_text_box_can_not_input.png");
		map.put(33, "The_button_of_use_counpon_can_not_click.png");
		map.put(34, "Unable_to_click_the_button_of_payment.png");
		map.put(35, "Unable_to_input_user_name.png");
		map.put(36, "Unable_to_input_the_password.png");
		map.put(37, "Unable_to_click_the_button_of_Login.png");
		map.put(38, "Unable_to_click_the_button_of_cancel_counpon.png");
		map.put(39, "Unable_to_alert_express.png");
		map.put(40, "Unable_choice_the_ShunFengKuaiDi.png");
		map.put(41, "Unable_to_click_the_next_button.png");
		map.put(42, "Unable_to_click_the_radio_HuoDaoFuKuan.png");
		map.put(43, "Unable_to_click_the_button_of_JieSuan.png");
	}

	// 截图
	public static void snapShot(TakesScreenshot drivername, String filename,
			int count) {
		String currentPath = System.getProperty("user.dir"); // 获取用户当前路径
		File scrFile = (File) drivername.getScreenshotAs(OutputType.FILE);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd-HHmmss");
		String time = sdf.format(new Date());
		try {
			FileUtils.copyFile(scrFile, new File(currentPath + "\\image\\"
					+ time + "_" + count + filename));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 跳转窗口
	public void switchToWin() throws InterruptedException { // 页面跳转
		String currentWindow = driver.getWindowHandle(); // 获取当前窗口句柄
		Set<String> handles = driver.getWindowHandles(); // 获取所有窗口句柄
		Iterator<String> it = handles.iterator();
		while (it.hasNext()) {
			if (currentWindow == it.next()) {
				continue;
			}
			driver.switchTo().window(it.next()); // 切换到新窗口
		}
	}

	public void openURL(String url, int count) throws Exception { // 1.打开网站-----HK
		try {
			driver.get(url);
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(1), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void moveOnSYYDFL(int count) throws Exception { 	// 2.鼠标滑动到所有运动分类-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a[@class='nav-sports']"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			System.out.println("1.all sports");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(2), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void moveOnPB(int count) throws Exception { // 3.鼠标滑动到跑步-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a[@class='level-top item item-running']"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			System.out.println("2.run");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(3), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void moveOnNSPBX(int count) throws Exception { // 4.鼠标滑动到女士跑步鞋-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a/span[contains(text(),'女裝跑步鞋')]"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			System.out.println("3.girl shoes");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(4), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickNSPBX(int count) throws Exception { // 5.击女士跑步鞋-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a/span[contains(text(),'女裝跑步鞋')]"));
				}
			});
			action.moveToElement(webElement).click().perform();
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(5), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickYDFW(int count) throws Exception { // 6.选择运动范围-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a[contains(text(),'10 公里以下')]"));
				}
			}).click();
			System.out.println("4.sport range");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(6), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickXB(int count) throws Exception { // 7.选择性别-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a[contains(text(),'女款')]"));
				}
			}).click();
			System.out.println("5.gender");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(7), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void inputPriceFrom(int count) throws Exception { // 8.输入价格范围——从-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("price-from"));
				}
			}).clear();
			driver.findElement(By.id("price-from")).sendKeys("0");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver, map.get(8),
					count);
			driver.quit();
			throw new Exception();
		}
	}

	public void inputPriceTo(int count) throws Exception { // 9.输入价格范围——到-----Hk
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("price-to"));
				}
			}).clear();
			driver.findElement(By.id("price-to")).sendKeys("800");
			System.out.println("6.price range");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver, map.get(8),
					count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickJGQJQD(int count) throws Exception { // 10.点击价格区间确定-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("btn-range"));
				}
			}).click();
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(9), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void choiceNSPBXPrice_One(int count) throws Exception { // 11.选择女士跑步鞋的价格-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			price_shoes1 =  wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//span[@id='product-price-43282']/span[@class='price']"));
				}
			}).getText();
			System.out.println("1.shoes price" + price_shoes1);
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(10), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void choiceNSPBX(int count) throws Exception { // 12.选择女士跑步鞋-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//img[@alt='KIPRUN MD 女裝跑鞋 過度外翻型 - 黃']"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			action.moveToElement(webElement).click().perform();
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(11), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void windowSkip(int count) throws Exception { // 13.窗口跳转-----HK
		try {
			switchToWin();
			Thread.sleep(sleepTime);
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,  map.get(12),
					count);
			driver.quit();
			throw new Exception();
		}
	}

	public void choiceNSPBXPrice_Two(int count) throws Exception { // 14.第二次选择白色鞋子的价格-----HK
		WebDriverWait wait = new WebDriverWait(driver, 10);
		price_shoes2 =  wait.until(new ExpectedCondition<WebElement>() {
			public WebElement apply(WebDriver d) {
				return d.findElement(By.xpath("//span[@id='product-price-43282']"));
			}
		}).getText();
		price_shoes1 = price_shoes1.replaceAll(" ", "");
		price_shoes2 = price_shoes2.replaceAll(" ", "");
		System.out.println("2.shoes price" + price_shoes2);
		//
		price_shoes1 = price_shoes1.substring(3, price_shoes1.length());
		price_shoes2 = price_shoes2.substring(3, price_shoes2.length());
		System.out.println(price_shoes1 + " and " + price_shoes2);
		if (price_shoes1.equals(price_shoes2)) {
			System.out.println("The shoes's price is normal");
		} else {
			System.out.println("The shoes's price is error");
			snapShot((TakesScreenshot) driver,  map.get(13),
					count);
			driver.quit();
			throw new Exception();
		}
	}

	public void choiceYellow(int count) throws Exception { // 15.选择黄色的鞋子-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//img[@title='黃色']"));
				}
			}).click();
			System.out.println("7.yellow");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(14), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void choice36Size(int count) throws Exception { // 16.选择37码-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a[contains(text(),'37碼 ')]"));
				}
			}).click();
			System.out.println("8.37 size");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(15), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void increaseNum(int count) throws Exception { // 17.增加鞋子的数量-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//button[@title='Increase']"));
				}
			}).click();
			System.out.println("9.add 1");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(16),
					count);
			driver.quit();
			throw new Exception();
		}
	}

	public void joinCart(int count) throws Exception { // 18.加入购物车-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//button[@title='加入購物車']"));
				}
			}).click();
			System.out.println("10.add to cart");

		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,  map.get(17),
					count);
			driver.quit();
			throw new Exception();
		}
	}
	
	public void product_view(int count) throws Exception { // 19.判断是否缺货-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<Boolean>(){
				public Boolean apply(WebDriver d) {
					return d.findElement(By.xpath("//div[@id='messages_product_view']/ul/li/ul/li/span")).isDisplayed();
				}});
			Thread.sleep(sleepTime);
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,  map.get(18),
					count);
			driver.quit();
			throw new Exception();
		}
	}
	
	public void selectT_shirt(int count) throws Exception { // 20.搜索商品-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("search"));
				}
			}).clear();
			driver.findElement(By.id("search")).sendKeys("T-shirt");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(19), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickSelect(int count) throws Exception { // 21.点击搜索按钮-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//button[@title='搜尋']"));
				}
			}).click();
			System.out.println("11.search t-shirt");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(20), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void choiceT_shirt(int count) throws Exception { // 22.选择一件-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//img[@alt='FEEL BY NIGHT 夜跑T-SHIRT 黃']"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			action.moveToElement(webElement).click().perform();
			System.out.println("12.choice a t-shirt");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(21), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void windowSkip2(int count) throws Exception { // 23.窗口跳转-----HK
		try {
			String currentWindow = driver.getWindowHandle();
			Set<String> handles = driver.getWindowHandles();
			Iterator<String> it = handles.iterator();
			while (it.hasNext()) {
				it.next();
				if (currentWindow == it.next()) {
					continue;
				}
				driver.switchTo().window(it.next());
			}
			Thread.sleep(sleepTime);
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(22), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void choiceT_shirt_Size(int count) throws Exception { // 23.2.选择尺码-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//a[@title='S ']"));
				}
			}).click();
			System.out.println("13.M size");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(23), count);
			driver.quit();
			throw new Exception();
		}
	}
	
	public void joinCart_Tshirt(int count) throws Exception { // 24.加入购物车-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//button[@title='加入購物車']"));
				}
			}).click();
			System.out.println("14.add to cart");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,  map.get(24),count);
			driver.quit();
			throw new Exception();
		}
	}

	public void product_view_tshirt(int count) throws Exception { // 25.判断是否缺货-----HK
		WebDriverWait wait = new WebDriverWait(driver, 10);
		WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
			public WebElement apply(WebDriver d) {
				return d.findElement(By
						.xpath("//div[@id='messages_product_view']/ul/li/ul/li/span"));
			}
		});
		Thread.sleep(sleepTime);
		if (webElement.getText().trim().substring(0, 2).equals("訂購")) {
			snapShot((TakesScreenshot) driver,  map.get(25),
					count);
			System.out.println("15.out of store");
			driver.quit();
			throw new Exception();
		}
		System.out.println("15.goods normal");
	}
	
	public void moveOnCart(int count) throws Exception { // 26.鼠标移动到购物车上-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement webElement = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.className("top-cart"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(26), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickCart(int count) throws Exception { // 27.鼠标点击购物车-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("topcart-checkout"));
				}
			}).click();
			System.out.println("16.view shopping cart");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(27), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void countPrice_One(int count) throws Exception { // 28.查看价格-----HK
		String shoesPrice = null;
		String shirtPrice = null;
		String totalSPrice = null;
		String totalBPrice = null;
		try {
			shoesPrice = driver.findElement(
					By.xpath("//table[1]/tbody/tr/td[6]/span/span")).getText();
			shirtPrice = driver.findElement(
					By.xpath("//table[2]/tbody/tr/td[6]/span/span")).getText();
			totalSPrice = driver
					.findElement(
							By.xpath("//table[@id='shopping-cart-totals-table']/tbody/tr/td[2]/span"))
					.getText();
			totalBPrice = driver
					.findElement(
							By.xpath("//table[@id='shopping-cart-totals-table']/tfoot/tr/td[2]/span"))
					.getText();
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					 map.get(28), count);
			driver.quit();
			throw new Exception();
		}
		//
		shoesPrice = shoesPrice.replaceAll(",", "");
		shirtPrice = shirtPrice.replaceAll(",", "");
		totalSPrice = totalSPrice.replaceAll(",", "");
		totalBPrice = totalBPrice.replaceAll(",", "");
		//
		double shoesPriced = Double.parseDouble(shoesPrice.substring(3,
				shoesPrice.length()));
		double shirtPriced = Double.parseDouble(shirtPrice.substring(3,
				shirtPrice.length()));
		double totalSPriced = Double.parseDouble(totalSPrice.substring(3,
				totalSPrice.length()));
		double totalBPriced = Double.parseDouble(totalBPrice.substring(3,
				totalBPrice.length()));
		if (shoesPriced + shirtPriced == totalSPriced
				&& totalSPriced == totalBPriced) {
			System.out.println(shoesPriced +"+"+shirtPriced+"="+totalSPriced+"="+totalBPriced);
			System.out.println("The price is normal");
		} else {
			System.out.println("The price is error");
			snapShot((TakesScreenshot) driver,
					map.get(29), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void addShoesQuanity(int count) throws Exception { // 29.增加鞋子的数量-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//table[1]/tbody/tr/td[5]/div/button[2]"));
				}
			}).click();
			System.out.println("17.add shoes quantity");
			Thread.sleep(sleepTime);
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(30), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void removeT_shirt(int count) throws Exception { // 30.删除T-shirt-----HK
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//table[4]/tbody/tr/td[7]/button"));
				}
			}).click();
			System.out.println("18.delete t-shirt");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(31), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void countPrice_Two(int count) throws Exception { // 31.鞋子的价格-----HK
		String shoesPrice = null;
		String totalSPrice = null;
		String totalBPrice = null;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			shoesPrice = wait.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//table[1]/tbody/tr/td[6]/span/span"));
				}
			}).getText();
			WebDriverWait wait2 = new WebDriverWait(driver, 10);
			totalSPrice = wait2.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//table[@id='shopping-cart-totals-table']/tbody/tr/td[2]/span"));
				}
			}).getText();
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			totalBPrice = wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//table[@id='shopping-cart-totals-table']/tfoot/tr/td[2]/span"));
				}
			}).getText();
			//
			shoesPrice = shoesPrice.replaceAll(",", "");
			totalSPrice = totalSPrice.replaceAll(",", "");
			totalBPrice = totalBPrice.replaceAll(",", "");
			//
			shoesPrice = shoesPrice.substring(3, shoesPrice.length());
			totalSPrice = totalSPrice.substring(3, totalSPrice.length());
			totalBPrice = totalBPrice.substring(3, totalBPrice.length());
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(28), count);
			driver.quit();
			throw new Exception();
		}
		double shoesPriced = Double.parseDouble(shoesPrice);
		double totalSPriced = Double.parseDouble(totalSPrice);
		double totalBPriced = Double.parseDouble(totalBPrice);
		if (shoesPriced == totalSPriced && totalSPriced == totalBPriced) {
			System.out.println(shoesPriced + "=" + totalSPriced + "="
					+ totalBPriced);
			System.out.println("The price is normal");
		} else {
			System.out.println("The price is error");
			snapShot((TakesScreenshot) driver,
					map.get(29), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickPayment(int count) throws Exception { // 35.点击去结算-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//button[@title='結帳']"));
				}
			}).click();
			System.out.println("21.payment");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(34), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void inputUserName(String username, int count) throws Exception { // 36.输入用户名-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("email"));
				}
			}).clear();
			driver.findElement(By.id("email")).sendKeys(username);
			System.out.println("22.input username");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(35), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void inputPasswd(String passwd, int count) throws Exception { // 37.输入密码-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("pass"));
				}
			}).clear();
			driver.findElement(By.id("pass")).sendKeys(passwd);
			System.out.println("23.input password");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(36), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void clickLogin(int count) throws Exception { // 38.点击登录按钮-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("send2"));
				}
			}).click();
			System.out.println("24.login");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(37), count);
			driver.quit();
			throw new Exception();
		}
	}
	
	public void clickPaymentFinal(int count) throws Exception { // 40.点击去结算-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//button[@title='結帳']"));
				}
			}).click();
			System.out.println("25.payment");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(34), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void checkAddress(int count) throws Exception { // 41.账单地址-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			WebElement webElement = wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//button[@id='checkout-save-shipping']"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			action.moveToElement(webElement).click().perform();
			System.out.println("26.ckeck address");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(39), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void deliveryMethods(int count) throws Exception { // 41.配送方式-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			WebElement webElement = wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//div[@id='shipping-method-buttons-container']/button"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			action.moveToElement(webElement).click().perform();
			System.out.println("27.delivery");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(39), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void paymentMessage(int count) throws Exception { // 41.付费资讯-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			WebElement webElement = wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//div[@id='payment-buttons-container']/button"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			action.moveToElement(webElement).click().perform();
			System.out.println("28.payment message");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(39), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void countPrice_Final(int count) throws Exception { // 45.计算的价格-----HK
		Thread.sleep(sleepTime);
		String Price1 = null;
		String Price3 = null;
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			WebElement webElement = wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.xpath("//table[@id='checkout-totals']/tbody/tr[1]/td/span[1]/span"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			Price1 = webElement.getText();
			Price3 = driver
					.findElement(
							By.xpath("//table[@id='checkout-totals']/tbody/tr[3]/td[2]/div[2]/span"))//1:	￥5,908.00
					.getText();
			Price1 = Price1.replaceAll(" ", "");
			Price3 = Price3.replaceAll(" ", "");
			Price1 = Price1.replaceAll(",", "");
			Price3 = Price3.replaceAll(",", "");
			Price1 = Price1.substring(3, Price1.length());
			Price3 = Price3.substring(3, Price3.length());
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver, map.get(28),
					count);
			driver.quit();
			throw new Exception();
		}
		double Price1d = Double.parseDouble(Price1);
		double Price3d = Double.parseDouble(Price3);
		System.out.println(Price1 + "=" + Price3);
		if (Price1d == Price3d) {
			System.out.println(Price1 + "=" + Price3);
			System.out.println("The price is normal");
		} else {
			System.out.println("The price is error");
			snapShot((TakesScreenshot) driver,
					map.get(29), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void checkoutOrder(int count) throws Exception { // 46.提交订单-----HK
		try {
			WebDriverWait wait3 = new WebDriverWait(driver, 10);
			WebElement webElement = wait3.until(new ExpectedCondition<WebElement>() {
				public WebElement apply(WebDriver d) {
					return d.findElement(By.id("checkout-place-order"));
				}
			});
			action.moveToElement(webElement).build().perform();
			Thread.sleep(sleepTime);
			action.moveToElement(webElement).click().perform();
			System.out.println("29.payment");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver,
					map.get(43), count);
			driver.quit();
			throw new Exception();
		}
	}

	public void quitDriver(int count) throws Exception { // 47.结束-----HK
		Thread.sleep(10000);
		try {
			driver.quit();
			System.out.println("30.end");
		} catch (Exception e) {
			snapShot((TakesScreenshot) driver, "quitDriver.png", count);
			driver.quit();
			throw new Exception();
		}
	}
}
